// Code generated by MockGen. DO NOT EDIT.
// Source: userServiceImpl.go

// Package services is a generated GoMock package.
package services

import (
	dto "gobus/dto"
	entities "gobus/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// AddPassenger mocks base method.
func (m *MockUserService) AddPassenger(passenger *entities.PassengerInfo, email string) (*entities.PassengerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPassenger", passenger, email)
	ret0, _ := ret[0].(*entities.PassengerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPassenger indicates an expected call of AddPassenger.
func (mr *MockUserServiceMockRecorder) AddPassenger(passenger, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPassenger", reflect.TypeOf((*MockUserService)(nil).AddPassenger), passenger, email)
}

// BookSeat mocks base method.
func (m *MockUserService) BookSeat(bookreq *dto.BookingRequest, email string) (*entities.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BookSeat", bookreq, email)
	ret0, _ := ret[0].(*entities.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BookSeat indicates an expected call of BookSeat.
func (mr *MockUserServiceMockRecorder) BookSeat(bookreq, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookSeat", reflect.TypeOf((*MockUserService)(nil).BookSeat), bookreq, email)
}

// CancelBooking mocks base method.
func (m *MockUserService) CancelBooking(bookID int) (*entities.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelBooking", bookID)
	ret0, _ := ret[0].(*entities.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelBooking indicates an expected call of CancelBooking.
func (mr *MockUserServiceMockRecorder) CancelBooking(bookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelBooking", reflect.TypeOf((*MockUserService)(nil).CancelBooking), bookID)
}

// FindBookingByID mocks base method.
func (m *MockUserService) FindBookingByID(ID int) (*entities.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBookingByID", ID)
	ret0, _ := ret[0].(*entities.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBookingByID indicates an expected call of FindBookingByID.
func (mr *MockUserServiceMockRecorder) FindBookingByID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBookingByID", reflect.TypeOf((*MockUserService)(nil).FindBookingByID), ID)
}

// FindBus mocks base method.
func (m *MockUserService) FindBus(request *dto.BusRequest) ([]*entities.BusesResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBus", request)
	ret0, _ := ret[0].([]*entities.BusesResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBus indicates an expected call of FindBus.
func (mr *MockUserServiceMockRecorder) FindBus(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBus", reflect.TypeOf((*MockUserService)(nil).FindBus), request)
}

// FindCoupon mocks base method.
func (m *MockUserService) FindCoupon() ([]*entities.Coupons, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCoupon")
	ret0, _ := ret[0].([]*entities.Coupons)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCoupon indicates an expected call of FindCoupon.
func (mr *MockUserServiceMockRecorder) FindCoupon() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCoupon", reflect.TypeOf((*MockUserService)(nil).FindCoupon))
}

// Login mocks base method.
func (m *MockUserService) Login(login *dto.LoginRequest) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", login)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceMockRecorder) Login(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserService)(nil).Login), login)
}

// MakePayment mocks base method.
func (m *MockUserService) MakePayment(bookID int) (*dto.MakePaymentResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakePayment", bookID)
	ret0, _ := ret[0].(*dto.MakePaymentResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakePayment indicates an expected call of MakePayment.
func (mr *MockUserServiceMockRecorder) MakePayment(bookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakePayment", reflect.TypeOf((*MockUserService)(nil).MakePayment), bookID)
}

// PaymentSuccess mocks base method.
func (m *MockUserService) PaymentSuccess(razor *entities.RazorPay) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaymentSuccess", razor)
	ret0, _ := ret[0].(error)
	return ret0
}

// PaymentSuccess indicates an expected call of PaymentSuccess.
func (mr *MockUserServiceMockRecorder) PaymentSuccess(razor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaymentSuccess", reflect.TypeOf((*MockUserService)(nil).PaymentSuccess), razor)
}

// RegisterUser mocks base method.
func (m *MockUserService) RegisterUser(user *entities.User) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", user)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockUserServiceMockRecorder) RegisterUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockUserService)(nil).RegisterUser), user)
}

// SeatAvailabilityChecker mocks base method.
func (m *MockUserService) SeatAvailabilityChecker(seatReq *dto.SeatAvailabilityRequest) (*dto.SeatAvailabilityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SeatAvailabilityChecker", seatReq)
	ret0, _ := ret[0].(*dto.SeatAvailabilityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SeatAvailabilityChecker indicates an expected call of SeatAvailabilityChecker.
func (mr *MockUserServiceMockRecorder) SeatAvailabilityChecker(seatReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeatAvailabilityChecker", reflect.TypeOf((*MockUserService)(nil).SeatAvailabilityChecker), seatReq)
}

// SubStationDetails mocks base method.
func (m *MockUserService) SubStationDetails(parent string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubStationDetails", parent)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubStationDetails indicates an expected call of SubStationDetails.
func (mr *MockUserServiceMockRecorder) SubStationDetails(parent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubStationDetails", reflect.TypeOf((*MockUserService)(nil).SubStationDetails), parent)
}

// ViewAllPassengers mocks base method.
func (m *MockUserService) ViewAllPassengers(email string) ([]*entities.PassengerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewAllPassengers", email)
	ret0, _ := ret[0].([]*entities.PassengerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewAllPassengers indicates an expected call of ViewAllPassengers.
func (mr *MockUserServiceMockRecorder) ViewAllPassengers(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewAllPassengers", reflect.TypeOf((*MockUserService)(nil).ViewAllPassengers), email)
}

// ViewBookings mocks base method.
func (m *MockUserService) ViewBookings(email string) ([]*entities.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewBookings", email)
	ret0, _ := ret[0].([]*entities.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewBookings indicates an expected call of ViewBookings.
func (mr *MockUserServiceMockRecorder) ViewBookings(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewBookings", reflect.TypeOf((*MockUserService)(nil).ViewBookings), email)
}
