// Code generated by MockGen. DO NOT EDIT.
// Source: UserRepositoryImpl.go

// Package repository is a generated GoMock package.
package repository

import (
	entities "gobus/entities"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// AddPassenger mocks base method.
func (m *MockUserRepository) AddPassenger(passenger *entities.PassengerInfo, email string) (*entities.PassengerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPassenger", passenger, email)
	ret0, _ := ret[0].(*entities.PassengerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPassenger indicates an expected call of AddPassenger.
func (mr *MockUserRepositoryMockRecorder) AddPassenger(passenger, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPassenger", reflect.TypeOf((*MockUserRepository)(nil).AddPassenger), passenger, email)
}

// CancelBooking mocks base method.
func (m *MockUserRepository) CancelBooking(booking *entities.Booking) (*entities.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelBooking", booking)
	ret0, _ := ret[0].(*entities.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelBooking indicates an expected call of CancelBooking.
func (mr *MockUserRepositoryMockRecorder) CancelBooking(booking interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelBooking", reflect.TypeOf((*MockUserRepository)(nil).CancelBooking), booking)
}

// FindBookingByID mocks base method.
func (m *MockUserRepository) FindBookingByID(bookID int) (*entities.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBookingByID", bookID)
	ret0, _ := ret[0].(*entities.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBookingByID indicates an expected call of FindBookingByID.
func (mr *MockUserRepositoryMockRecorder) FindBookingByID(bookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBookingByID", reflect.TypeOf((*MockUserRepository)(nil).FindBookingByID), bookID)
}

// FindBus mocks base method.
func (m *MockUserRepository) FindBus(depart, arrival string) ([]*entities.BusScheduleCombo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBus", depart, arrival)
	ret0, _ := ret[0].([]*entities.BusScheduleCombo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBus indicates an expected call of FindBus.
func (mr *MockUserRepositoryMockRecorder) FindBus(depart, arrival interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBus", reflect.TypeOf((*MockUserRepository)(nil).FindBus), depart, arrival)
}

// FindCoupon mocks base method.
func (m *MockUserRepository) FindCoupon() ([]*entities.Coupons, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCoupon")
	ret0, _ := ret[0].([]*entities.Coupons)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCoupon indicates an expected call of FindCoupon.
func (mr *MockUserRepositoryMockRecorder) FindCoupon() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCoupon", reflect.TypeOf((*MockUserRepository)(nil).FindCoupon))
}

// FindCouponByID mocks base method.
func (m *MockUserRepository) FindCouponByID(id int) (*entities.Coupons, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCouponByID", id)
	ret0, _ := ret[0].(*entities.Coupons)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCouponByID indicates an expected call of FindCouponByID.
func (mr *MockUserRepositoryMockRecorder) FindCouponByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCouponByID", reflect.TypeOf((*MockUserRepository)(nil).FindCouponByID), id)
}

// FindSchedule mocks base method.
func (m *MockUserRepository) FindSchedule(depart, arrival string) (*entities.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSchedule", depart, arrival)
	ret0, _ := ret[0].(*entities.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSchedule indicates an expected call of FindSchedule.
func (mr *MockUserRepositoryMockRecorder) FindSchedule(depart, arrival interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSchedule", reflect.TypeOf((*MockUserRepository)(nil).FindSchedule), depart, arrival)
}

// FindUserByEmail mocks base method.
func (m *MockUserRepository) FindUserByEmail(email string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmail", email)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByEmail indicates an expected call of FindUserByEmail.
func (mr *MockUserRepositoryMockRecorder) FindUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).FindUserByEmail), email)
}

// GetBaseFare mocks base method.
func (m *MockUserRepository) GetBaseFare(scheduleID int) (*entities.BaseFare, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseFare", scheduleID)
	ret0, _ := ret[0].(*entities.BaseFare)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBaseFare indicates an expected call of GetBaseFare.
func (mr *MockUserRepositoryMockRecorder) GetBaseFare(scheduleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseFare", reflect.TypeOf((*MockUserRepository)(nil).GetBaseFare), scheduleID)
}

// GetBusInfo mocks base method.
func (m *MockUserRepository) GetBusInfo(id int) (*entities.Buses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBusInfo", id)
	ret0, _ := ret[0].(*entities.Buses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBusInfo indicates an expected call of GetBusInfo.
func (mr *MockUserRepositoryMockRecorder) GetBusInfo(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusInfo", reflect.TypeOf((*MockUserRepository)(nil).GetBusInfo), id)
}

// GetBusTypeDetails mocks base method.
func (m *MockUserRepository) GetBusTypeDetails(code string) (*entities.BusType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBusTypeDetails", code)
	ret0, _ := ret[0].(*entities.BusType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBusTypeDetails indicates an expected call of GetBusTypeDetails.
func (mr *MockUserRepositoryMockRecorder) GetBusTypeDetails(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusTypeDetails", reflect.TypeOf((*MockUserRepository)(nil).GetBusTypeDetails), code)
}

// GetChart mocks base method.
func (m *MockUserRepository) GetChart(busid int, day time.Time) (*entities.BusSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChart", busid, day)
	ret0, _ := ret[0].(*entities.BusSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChart indicates an expected call of GetChart.
func (mr *MockUserRepositoryMockRecorder) GetChart(busid, day interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChart", reflect.TypeOf((*MockUserRepository)(nil).GetChart), busid, day)
}

// GetParentLocation mocks base method.
func (m *MockUserRepository) GetParentLocation(name string) (*entities.SubStation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParentLocation", name)
	ret0, _ := ret[0].(*entities.SubStation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParentLocation indicates an expected call of GetParentLocation.
func (mr *MockUserRepositoryMockRecorder) GetParentLocation(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParentLocation", reflect.TypeOf((*MockUserRepository)(nil).GetParentLocation), name)
}

// GetProviderInfo mocks base method.
func (m *MockUserRepository) GetProviderInfo(providerID int) (*entities.ServiceProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderInfo", providerID)
	ret0, _ := ret[0].(*entities.ServiceProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderInfo indicates an expected call of GetProviderInfo.
func (mr *MockUserRepositoryMockRecorder) GetProviderInfo(providerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderInfo", reflect.TypeOf((*MockUserRepository)(nil).GetProviderInfo), providerID)
}

// GetSeatLayout mocks base method.
func (m *MockUserRepository) GetSeatLayout(id int) (*entities.BusSeatLayout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeatLayout", id)
	ret0, _ := ret[0].(*entities.BusSeatLayout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeatLayout indicates an expected call of GetSeatLayout.
func (mr *MockUserRepositoryMockRecorder) GetSeatLayout(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeatLayout", reflect.TypeOf((*MockUserRepository)(nil).GetSeatLayout), id)
}

// GetSubStationDetails mocks base method.
func (m *MockUserRepository) GetSubStationDetails(parent string) ([]*entities.SubStation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubStationDetails", parent)
	ret0, _ := ret[0].([]*entities.SubStation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubStationDetails indicates an expected call of GetSubStationDetails.
func (mr *MockUserRepositoryMockRecorder) GetSubStationDetails(parent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubStationDetails", reflect.TypeOf((*MockUserRepository)(nil).GetSubStationDetails), parent)
}

// GetUserInfo mocks base method.
func (m *MockUserRepository) GetUserInfo(userID int) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", userID)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockUserRepositoryMockRecorder) GetUserInfo(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockUserRepository)(nil).GetUserInfo), userID)
}

// MakeBooking mocks base method.
func (m *MockUserRepository) MakeBooking(booking *entities.Booking) (*entities.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeBooking", booking)
	ret0, _ := ret[0].(*entities.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeBooking indicates an expected call of MakeBooking.
func (mr *MockUserRepositoryMockRecorder) MakeBooking(booking interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeBooking", reflect.TypeOf((*MockUserRepository)(nil).MakeBooking), booking)
}

// PaymentSuccess mocks base method.
func (m *MockUserRepository) PaymentSuccess(razor *entities.RazorPay) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaymentSuccess", razor)
	ret0, _ := ret[0].(error)
	return ret0
}

// PaymentSuccess indicates an expected call of PaymentSuccess.
func (mr *MockUserRepositoryMockRecorder) PaymentSuccess(razor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaymentSuccess", reflect.TypeOf((*MockUserRepository)(nil).PaymentSuccess), razor)
}

// RegisterUser mocks base method.
func (m *MockUserRepository) RegisterUser(user *entities.User) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", user)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockUserRepositoryMockRecorder) RegisterUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockUserRepository)(nil).RegisterUser), user)
}

// UpdateBooking mocks base method.
func (m *MockUserRepository) UpdateBooking(booking *entities.Booking) (*entities.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBooking", booking)
	ret0, _ := ret[0].(*entities.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBooking indicates an expected call of UpdateBooking.
func (mr *MockUserRepositoryMockRecorder) UpdateBooking(booking interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBooking", reflect.TypeOf((*MockUserRepository)(nil).UpdateBooking), booking)
}

// UpdateChart mocks base method.
func (m *MockUserRepository) UpdateChart(chart *entities.BusSchedule) (*entities.BusSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChart", chart)
	ret0, _ := ret[0].(*entities.BusSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChart indicates an expected call of UpdateChart.
func (mr *MockUserRepositoryMockRecorder) UpdateChart(chart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChart", reflect.TypeOf((*MockUserRepository)(nil).UpdateChart), chart)
}

// UpdateProvider mocks base method.
func (m *MockUserRepository) UpdateProvider(provider *entities.ServiceProvider) (*entities.ServiceProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProvider", provider)
	ret0, _ := ret[0].(*entities.ServiceProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProvider indicates an expected call of UpdateProvider.
func (mr *MockUserRepositoryMockRecorder) UpdateProvider(provider interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProvider", reflect.TypeOf((*MockUserRepository)(nil).UpdateProvider), provider)
}

// UpdateUser mocks base method.
func (m *MockUserRepository) UpdateUser(user *entities.User) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepositoryMockRecorder) UpdateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepository)(nil).UpdateUser), user)
}

// ViewAllPassengers mocks base method.
func (m *MockUserRepository) ViewAllPassengers(email string) ([]*entities.PassengerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewAllPassengers", email)
	ret0, _ := ret[0].([]*entities.PassengerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewAllPassengers indicates an expected call of ViewAllPassengers.
func (mr *MockUserRepositoryMockRecorder) ViewAllPassengers(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewAllPassengers", reflect.TypeOf((*MockUserRepository)(nil).ViewAllPassengers), email)
}

// ViewBookings mocks base method.
func (m *MockUserRepository) ViewBookings(email string) ([]*entities.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewBookings", email)
	ret0, _ := ret[0].([]*entities.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewBookings indicates an expected call of ViewBookings.
func (mr *MockUserRepositoryMockRecorder) ViewBookings(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewBookings", reflect.TypeOf((*MockUserRepository)(nil).ViewBookings), email)
}
